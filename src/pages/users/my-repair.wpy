<style lang="less">
    .navbar {
        .page,
        .page__bd {
            height: 100%;
        }
        .page__bd {
            padding-bottom: 0;
        }
        .weui-tab__content {
            padding-top: 60px;
            /*text-align: center;*/
        }
    }

    .black-one {
        border: 1px solid #ffffff;
        border-radius: 5px;
        margin: 10px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.15);
    }

    .avatar-wrap {
        position: relative;
        margin-right: 10px;
    }

    .avatar {
        width: 35px;
        height: 35px;
        display: block;
        border-radius: 50%;
    }

    .top-title {
        display: flex;
        align-items: center;
    }

    .icons {
        vertical-align: middle;
        width: 25px;
        height: 25px;
    }

    ._thumb {
        width: 60px;
        height: 60px;
        vertical-align: top;
    }

    ._address {
        vertical-align: middle;
        width: 15px;
        height: 15px;
        margin-bottom: 2px;
    }

    ._text {
        display: inline-block;
        box-sizing: border-box;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    // 滑动
    .touch-item {
        font-size: 14px;
        display: flex;
        justify-content: space-between;
        border-bottom: 1px solid #ccc;
        width: 100%;
        overflow: hidden
    }

    .content {
        width: 100%;
        padding: 10px;
        line-height: 22px;
        margin-right: 0;
        -webkit-transition: all 0.4s;
        transition: all 0.4s;
        -webkit-transform: translateX(90px);
        transform: translateX(90px);
        margin-left: -90px
    }

    .del {
        background-color: orangered;
        width: 90px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #fff;
        -webkit-transform: translateX(90px);
        transform: translateX(90px);
        -webkit-transition: all 0.4s;
        transition: all 0.4s;
    }

    .touch-move-active .content, .touch-move-active .del {
        -webkit-transform: translateX(0);
        transform: translateX(0);
    }
</style>
<template>
    <view class="navbar page">
        <view class="page__bd">
            <view class="weui-tab">
                <view class="weui-navbar">
                    <view wx:for="{{tabs}}" wx:key="*this" id="{{index}}"
                          class="weui-navbar__item {{activeIndex == index ? 'weui-bar__item_on' : ''}}" @tap="tabClick">
                        <view class="weui-navbar__title">{{item}}</view>
                    </view>
                    <view class="weui-navbar__slider"
                          style="left: {{ sliderLeft }}px; transform: translateX({{ sliderOffset }}px); -webkit-transform: translateX({{ sliderOffset }}px);"></view>
                </view>
                <view class="weui-tab__panel" style="padding-top: 0;">
                    <view class="weui-tab__content" hidden="{{activeIndex != 0}}">
                        <repeat for="{{ orders }}" key="index" index="index" item="order">
                            <navigator url="/pages/show?id={{ order.id }}">
                                <view class="black-one">
                                    <view class="weui-panel__hd top-title">
                                        <view class="weui-cell__bd _text" style="width: 50%;">
                                            <image class="icons" src="./../../images/od.png"/>
                                            {{ order.order }}
                                        </view>
                                    </view>
                                    <view class="weui-panel__bd" style="padding: 10px 15px;">
                                        <navigator url="" class="weui-media-box weui-media-box_appmsg"
                                                   hover-class="weui-cell_active" style="padding: 5px;">
                                            <view wx:if="{{ order.images }}"
                                                  class="weui-media-box__hd weui-media-box__hd_in-appmsg">
                                                <image class="_thumb" src="{{ order.images }}"/>
                                            </view>
                                            <view wx:else class="weui-media-box__hd weui-media-box__hd_in-appmsg">
                                                <image class="_thumb" src="./../../images/no-img.png"/>
                                            </view>
                                            <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
                                                <view class="weui-media-box__desc">
                                                    {{ order.content }}
                                                </view>
                                                <view class="weui-media-box__info">
                                                    <view class="weui-media-box__info__meta _text" style="width: 55%;">
                                                        <image class="_address" src="./../../images/address.png"/>
                                                        {{ order.area.name }}
                                                    </view>
                                                    <view class="weui-media-box__info__meta weui-media-box__info__meta_extra _text"
                                                          style="width: 45%;">
                                                        <image class="_address" src="./../../images/time.png"/>
                                                        {{ order.time_diff }}
                                                    </view>
                                                </view>
                                            </view>
                                        </navigator>
                                    </view>
                                </view>
                            </navigator>
                        </repeat>
                        <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
                            <view class="weui-loadmore__tips weui-loadmore__tips_in-line">我是有底线的哦！~~~</view>
                        </view>
                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 1}}">

                        <view class="container">
                            <view class="touch-item {{item.isTouchMove ? 'touch-move-active' : ''}}"
                                  data-index="{{index}}" bindtouchstart="touchstart" bindtouchmove="touchmove"
                                  wx:for="{{items}}" wx:key="index">
                                <view class="content">{{item.content}}</view>
                                <view class="del" catchtap="del" data-index="{{index}}">删除</view>
                            </view>
                        </view>

                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 2}}">
                        3
                    </view>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import api from '@/utils/api'
    import util from '@/utils/util'
    import {dev_upyun} from '@/utils/path'

    const sliderWidth = 96; // 需要设置slider的宽度，用于计算中间位置

    export default class Toast extends wepy.page {
        config = {
            navigationBarTitleText: '我的申报',
            enablePullDownRefresh: true
        }
        data = {
            tabs: ['申报中', '申诉中', '已完成'],
            activeIndex: 0,
            sliderOffset: 0,
            sliderLeft: 0,
            userInfo: null,
            orders: [],
            page: 1,
            noMoreData: false,
            items: [],
            startX: 0, // 开始坐标
            startY: 0
        };

        methods = {
            tabClick(e) {
                this.sliderOffset = e.currentTarget.offsetLeft;
                this.activeIndex = e.currentTarget.id;
            },
            //手指触摸动作开始 记录起点X坐标
            touchstart(e) {
                //开始触摸时 重置所有删除
                this.data.items.forEach(function (v, i) {
                    if (v.isTouchMove)//只操作为true的
                        v.isTouchMove = false;
                })
                this.setData({
                    startX: e.changedTouches[0].clientX,
                    startY: e.changedTouches[0].clientY,
                    items: this.data.items
                })
            },
            //滑动事件处理
            touchmove(e) {
                var that = this,
                    index = e.currentTarget.dataset.index,//当前索引
                    startX = that.data.startX,//开始X坐标
                    startY = that.data.startY,//开始Y坐标
                    touchMoveX = e.changedTouches[0].clientX,//滑动变化坐标
                    touchMoveY = e.changedTouches[0].clientY,//滑动变化坐标

                    _X = touchMoveX - startX,
                    _Y = touchMoveY - startY,
                    //返回角度 /Math.atan()返回数字的反正切值
                    angle = 360 * Math.atan(_Y / _X) / (2 * Math.PI);
                that.data.items.forEach(function (v, i) {
                    v.isTouchMove = false
                    //滑动超过30度角 return
                    if (Math.abs(angle) > 30) return;
                    if (i == index) {
                        if (touchMoveX > startX) //右滑
                            v.isTouchMove = false
                        else //左滑
                            v.isTouchMove = true
                    }
                })
                //更新数据
                that.setData({
                    items: that.data.items
                })
            },
            //删除事件
            del(e) {
                this.data.items.splice(e.currentTarget.dataset.index, 1)
                this.setData({
                    items: this.data.items
                })
            }
        }

        async onLoad() {
            let res = await wepy.getSystemInfo();

            this.sliderLeft = (res.windowWidth / this.tabs.length - sliderWidth) / 2;
            this.sliderOffset = res.windowWidth / this.tabs.length * this.activeIndex;

            // 获取缓存中的 access_token
            let accessToken = wepy.getStorageSync('access_token')

            // Token 存在则说明已登录
            if (accessToken) {
                // 测试 authRequest 接口
                let userResponse = await api.authRequest('user', false)
                this.userInfo = userResponse.data
            } else {
                // 获取用户微信信息
                let userInfo = await api.getUserInfo()
                if (userInfo) {
                    let info = {
                        nickname: userInfo.nickName,
                        sex: userInfo.gender,
                        avatar: userInfo.avatarUrl
                    }
                    // 登陆 后台授权
                    await api.login(info)
                    // 获取 用户信息
                    let userResponse = await api.authRequest('user', false)
                    this.userInfo = userResponse.data
                }
            }

            await this.getOrder()
            this.$apply()

            wepy.setStorageSync('school_id', this.userInfo.school_id)
            wepy.setStorageSync('phone', this.userInfo.phone || 0)

            for (var i = 0; i < 10; i++) {
                this.data.items.push({
                    content: i + " 向左滑动删除哦,向左滑动删除哦,向左滑动删除哦,向左滑动删除哦,向左滑动删除哦",
                    isTouchMove: false //默认全隐藏删除
                })
            }
            this.setData({
                items: this.data.items
            })
        }

        async getOrder(page = 1, reset = false) {
            try {
                let orderResponse = await api.authRequest({
                    url: 'orders',
                    data: {
                        school_id: this.userInfo.school_id,
                        page: page,
                        status: 0,
                        self: 1
                    }
                }, true)

                let orders = orderResponse.data.data

                if (orders) {
                    orders.forEach(order => {
                        order.time_diff = util.diffForHumans(order.created_at)
                        if (order.images.length > 0) {
                            order.images = `${dev_upyun}/${order.images[0].image_url}`
                        } else {
                            order.images = ''
                        }
                    })

                    // 如果传入参数 reset 为true，则覆盖 orders
                    this.orders = reset ? orders : this.orders.concat(orders)

                    let pagination = orderResponse.data.meta

                    // 根据分页设置是否还有更多数据
                    if (pagination.current_page * pagination.per_page > pagination.total) {
                        this.noMoreData = true
                    }
                    this.$apply()
                }
            } catch (err) {
                console.log(err)
                wepy.showModal({
                    title: '提示',
                    showCancel: false,
                    confirmText: '朕知道了',
                    content: err + '服务器错误，请重试！'
                })
            }
        }

        async onPullDownRefresh() {
            this.noMoreData = false
            this.page = 1
            await this.getOrder(1, true)
            wepy.stopPullDownRefresh()
        }

        async onReachBottom() {
            // 如果没有更多内容，直接返回
            if (this.noMoreData) {
                return
            }

            this.page = this.page + 1
            await this.getOrder(this.page)
            this.$apply()
        }
    }
</script>
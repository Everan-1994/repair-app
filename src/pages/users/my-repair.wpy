<style lang="less">
    .navbar {
        .page,
        .page__bd {
            height: 100%;
        }
        .page__bd {
            padding-bottom: 0;
        }
        .weui-tab__content {
            padding-top: 60px;
            /*text-align: center;*/
        }
    }

    ._address {
        vertical-align: middle;
        width: 15px;
        height: 15px;
        margin-bottom: 2px;
    }

    ._text {
        display: inline-block;
        box-sizing: border-box;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    // 滑动
    .order-item {
        width: 100%;
        height: 161px;
        position: relative;
        left:0;
        top:0;
        overflow: hidden;
    }
    .order {
        position: absolute;
        width: 100%;
        left:0;
        top:0;
        z-index: 100;
    }
    ._actiong {
        position: absolute;
        width: 100%;
        height: 86%;
        left:0;
        top:0;
        z-index: 0;;
    }
    ._del {
        position: absolute;
        width: 150rpx;
        height: 100%;
        top: 1rpx;
        right: 0;
        background-color: rgb(255, 58, 50);
        color: #FFF;
        text-align: center;
        line-height: 150rpx;
    }
    ._edit {
        position: absolute;
        width: 200rpx;
        height: 100%;
        top:1rpx;
        right: 150rpx;
        background-color: rgb(200, 199, 205);
        color:#FFF;
        text-align: center;
        line-height:150rpx;
    }
    .msg-item {
        width: 100%;
        height: 150rpx;
        border-bottom: 1rpx solid rgb(233, 233, 233);
        position: relative;
        left:0;
        top:0;
        overflow: hidden;
    }

    .msg {
        position: absolute;
        width: 100%;
        height: 150rpx;
        left:0;
        top:0;
        z-index: 100;
        background-color: #FFF;
    }

    .header-img {
        position: absolute;
        width: 110rpx;
        height: 110rpx;
        left: 20rpx;
        top: 20rpx;
        border-radius: 10%;
    }

    .user-name {
        position: absolute;
        left: 150rpx;
        top: 20rpx;
    }

    .msg-text {
        position: absolute;
        left: 150rpx;
        bottom: 20rpx;
        font-size: 80%;
        color: rgb(127, 127, 127);
    }

    .msg-menu {
        position: absolute;
        width: 100%;
        height: 150rpx;
        left:0;
        top:0;
        z-index: 0;
    }

    .menu-delete {
        position: absolute;
        width: 150rpx;
        height: 148rpx;
        top:1rpx;
        right: 0;
        background-color: rgb(255, 58, 50);
        color:#FFF;
        text-align: center;
        line-height:150rpx;
    }

    .menu-mark {
        position: absolute;
        width: 200rpx;
        height: 148rpx;
        top:1rpx;
        right: 150rpx;
        background-color: rgb(200, 199, 205);
        color:#FFF;
        text-align: center;
        line-height:150rpx;
    }
</style>
<template>
    <view class="navbar page">
        <view class="page__bd">
            <view class="weui-tab">
                <view class="weui-navbar">
                    <view wx:for="{{tabs}}" wx:key="*this" id="{{index}}"
                          class="weui-navbar__item {{activeIndex == index ? 'weui-bar__item_on' : ''}}" @tap="tabClick">
                        <view class="weui-navbar__title">{{item}}</view>
                    </view>
                    <view class="weui-navbar__slider"
                          style="left: {{ sliderLeft }}px; transform: translateX({{ sliderOffset }}px); -webkit-transform: translateX({{ sliderOffset }}px);"></view>
                </view>
                <view class="weui-tab__panel" style="padding-top: 0;">
                    <view class="weui-tab__content" hidden="{{activeIndex != 0}}">
                        1
                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 1}}">
                        <view class="container">
                            <scroll-view style='height:{{ height }}px;' scroll-y='{{ scrollY }}' class='msg-list'>
                                <view wx:for="{{ orders }}" wx:key="id" wx:index="index" wx:for-item="order"
                                      class='msg-item' animation='{{ order.wrapAnimation }}'>
                                    <view id='{{ index }}' index="index" class='msg' animation='{{order.animation}}'
                                          @touchstart='onTouchStart' @touchmove='onTouchMove' @touchend='onTouchEnd'>
                                        <view wx:if="{{ order.images }}"
                                              class="weui-media-box__hd weui-media-box__hd_in-appmsg">
                                            <image class="header-img" src="{{ order.images }}"/>
                                        </view>
                                        <view wx:else class="weui-media-box__hd weui-media-box__hd_in-appmsg">
                                            <image class="header-img" src="./../../images/no-img.png"/>
                                        </view>
                                        <text class='user-name weui-media-box__desc'>
                                            {{ order.content }}
                                        </text>
                                        <view class='msg-text'>
                                            <view class="weui-media-box__info">
                                                <view class="weui-media-box__info__meta _text">
                                                    <image class="_address" src="./../../images/address.png"/>
                                                    {{ order.area.name }}
                                                </view>
                                                <view class="weui-media-box__info__meta weui-media-box__info__meta_extra _text">
                                                    <image class="_address" src="./../../images/time.png"/>
                                                    {{ order.time_diff }}
                                                </view>
                                            </view>
                                        </view>
                                    </view>
                                    <view class='msg-menu'>
                                        <view class='menu-delete' id='{{ index }}' data-id="{{ order.id }}"
                                              @tap="onDeleteMsgTap">
                                            删除
                                        </view>
                                        <view class='menu-mark'>
                                            标记未读
                                        </view>
                                    </view>
                                </view>
                            </scroll-view>
                        </view>
                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 2}}">
                        3
                    </view>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import api from '@/utils/api'
    import util from '@/utils/util'
    import {dev_upyun} from '@/utils/path'

    const sliderWidth = 96; // 需要设置slider的宽度，用于计算中间位置

    export default class Toast extends wepy.page {
        config = {
            navigationBarTitleText: '我的申报',
            enablePullDownRefresh: true
        }
        data = {
            tabs: ['申报中', '申诉中', '已完成'],
            activeIndex: 0,
            sliderOffset: 0,
            sliderLeft: 0,
            userInfo: null,
            orders: [],
            page: 1,
            noMoreData: false,
            swipeCheckX: 35, //激活检测滑动的阈值
            swipeCheckState: 0, //0未激活 1激活
            maxMoveLeft: 185, //消息列表项最大左滑距离
            correctMoveLeft: 175, //显示菜单时的左滑距离
            thresholdMoveLeft: 75,//左滑阈值，超过则显示菜单
            lastShowMsgId: '', //记录上次显示菜单的消息id
            moveX: 0,  //记录平移距离
            showState: 0, //0 未显示菜单 1显示菜单
            touchStartState: 0, // 开始触摸时的状态 0 未显示菜单 1 显示菜单
            swipeDirection: 0, //是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动
            height: 0,
            scrollY: false
        };

        methods = {
            tabClick(e) {
                this.sliderOffset = e.currentTarget.offsetLeft;
                this.activeIndex = e.currentTarget.id;
            },
            onTouchStart: function (e) {
                if (this.showState === 1) {
                    this.touchStartState = 1;
                    this.showState = 0;
                    this.moveX = 0;
                    this.translateXMsgItem(this.lastShowMsgId, 0, 200);
                    this.lastShowMsgId = "";
                    return;
                }
                this.firstTouchX = e.touches[0].clientX;
                this.firstTouchY = e.touches[0].clientY;
                if (this.firstTouchX > this.swipeCheckX) {
                    this.swipeCheckState = 1;
                }
                this.lastMoveTime = e.timeStamp;
            },

            onTouchMove(e) {
                if (this.swipeCheckState === 0) {
                    return;
                }
                //当开始触摸时有菜单显示时，不处理滑动操作
                if (this.touchStartState === 1) {
                    return;
                }
                var moveX = e.touches[0].clientX - this.firstTouchX;
                var moveY = e.touches[0].clientY - this.firstTouchY;
                //已触发垂直滑动，由scroll-view处理滑动操作
                if (this.swipeDirection === 2) {
                    return;
                }
                //未触发滑动方向
                if (this.swipeDirection === 0) {
                    //触发垂直操作
                    if (Math.abs(moveY) > 4) {
                        this.swipeDirection = 2;

                        return;
                    }
                    //触发水平操作
                    if (Math.abs(moveX) > 4) {
                        this.swipeDirection = 1;
                    }
                    else {
                        return;
                    }

                }
                this.lastMoveTime = e.timeStamp;
                //处理边界情况
                if (moveX > 0) {
                    moveX = 0;
                }
                //检测最大左滑距离
                if (moveX < -this.maxMoveLeft) {
                    moveX = -this.maxMoveLeft;
                }
                this.moveX = moveX;
                this.translateXMsgItem(e.currentTarget.id, moveX, 0);
            },
            onTouchEnd(e) {
                this.swipeCheckState = 0;
                var swipeDirection = this.swipeDirection;
                this.swipeDirection = 0;
                if (this.touchStartState === 1) {
                    this.touchStartState = 0;
                    this.setData({scrollY: true});
                    return;
                }
                //垂直滚动，忽略
                if (swipeDirection !== 1) {
                    return;
                }
                if (this.moveX === 0) {
                    this.showState = 0;
                    //不显示菜单状态下,激活垂直滚动
                    this.setData({scrollY: true});
                    return;
                }
                if (this.moveX === this.correctMoveLeft) {
                    this.showState = 1;
                    this.lastShowMsgId = e.currentTarget.id;
                    return;
                }
                if (this.moveX < -this.thresholdMoveLeft) {
                    this.moveX = -this.correctMoveLeft;
                    this.showState = 1;
                    this.lastShowMsgId = e.currentTarget.id;
                }
                else {
                    this.moveX = 0;
                    this.showState = 0;
                    //不显示菜单,激活垂直滚动
                    this.setData({scrollY: true});
                }
                this.translateXMsgItem(e.currentTarget.id, this.moveX, 500);
            },
            onDeleteMsgTap(e) {
                console.log(e.target.dataset.id)
                console.log(e.currentTarget.id)
                this.deleteMsgItem(e)
            }

        }

        translateXMsgItem(id, x, duration) {
            var animation = wepy.createAnimation({duration: duration});
            animation.translateX(x).step();
            this.animationMsgItem(id, animation);
        }

        animationMsgItem(id, animation) {
            var param = {};
            var indexString = `orders[${id}].animation`;
            param[indexString] = animation.export();
            this.setData(param);
        }

        deleteMsgItem(e) {
            var animation = wx.createAnimation({duration: 200});
            animation.height(0).opacity(0).step();
            this.animationMsgWrapItem(e.currentTarget.id, animation);
            var s = this;
            setTimeout(function () {
                s.data.orders.splice(e.currentTarget.id, 1);
                s.setData({orders: s.data.orders});
            }, 200);
            this.showState = 0;
            this.setData({scrollY: true});
        }

        animationMsgWrapItem(index, animation) {
            var param = {};
            var indexString = 'orders[' + index + '].wrapAnimation';
            param[indexString] = animation.export();
            this.setData(param);
        }

        async onLoad() {
            let deviceInfo = wx.getSystemInfoSync();
            this.height = deviceInfo.windowHeight; // 高度

            let res = await wepy.getSystemInfo();

            this.sliderLeft = (res.windowWidth / this.tabs.length - sliderWidth) / 2;
            this.sliderOffset = res.windowWidth / this.tabs.length * this.activeIndex;

            // 获取缓存中的 access_token
            let accessToken = wepy.getStorageSync('access_token')

            // Token 存在则说明已登录
            if (accessToken) {
                // 测试 authRequest 接口
                let userResponse = await api.authRequest('user', false)
                this.userInfo = userResponse.data
            } else {
                // 获取用户微信信息
                let userInfo = await api.getUserInfo()
                if (userInfo) {
                    let info = {
                        nickname: userInfo.nickName,
                        sex: userInfo.gender,
                        avatar: userInfo.avatarUrl
                    }
                    // 登陆 后台授权
                    await api.login(info)
                    // 获取 用户信息
                    let userResponse = await api.authRequest('user', false)
                    this.userInfo = userResponse.data
                }
            }

            await this.getOrder()
            this.$apply()

            wepy.setStorageSync('school_id', this.userInfo.school_id)
            wepy.setStorageSync('phone', this.userInfo.phone || 0)

        }

        async getOrder(page = 1, reset = false) {
            try {
                let orderResponse = await api.authRequest({
                    url: 'orders',
                    data: {
                        school_id: this.userInfo.school_id,
                        page: page,
                        status: 0,
                        self: 1
                    }
                }, true)

                let orders = orderResponse.data.data

                if (orders) {
                    orders.forEach(order => {
                        order.time_diff = util.diffForHumans(order.created_at)
                        if (order.images.length > 0) {
                            order.images = `${dev_upyun}/${order.images[0].image_url}`
                        } else {
                            order.images = ''
                        }
                    })

                    // 如果传入参数 reset 为true，则覆盖 orders
                    this.orders = reset ? orders : this.orders.concat(orders)

                    let pagination = orderResponse.data.meta

                    // 根据分页设置是否还有更多数据
                    if (pagination.current_page * pagination.per_page > pagination.total) {
                        this.noMoreData = true
                    }
                    this.$apply()
                }
            } catch (err) {
                console.log(err)
                wepy.showModal({
                    title: '提示',
                    showCancel: false,
                    confirmText: '朕知道了',
                    content: err + '服务器错误，请重试！'
                })
            }
        }

        async onPullDownRefresh() {
            this.noMoreData = false
            this.page = 1
            await this.getOrder(1, true)
            wepy.stopPullDownRefresh()
        }

        async onReachBottom() {
            // 如果没有更多内容，直接返回
            if (this.noMoreData) {
                return
            }

            this.page = this.page + 1
            await this.getOrder(this.page)
            this.$apply()
        }
    }
</script>